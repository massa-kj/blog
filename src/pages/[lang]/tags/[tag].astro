---
import BaseLayout from '../../../layouts/BaseLayout.astro';
import ArticleCard from '../../../components/astro/ArticleCard.astro';
import { TOP_MENU } from '../../../utils/share';
import { getCollection } from 'astro:content';

export async function getStaticPaths() {
  const [articles, cheatsheets, notes] = await Promise.all([
    getCollection(TOP_MENU.articles),
    getCollection(TOP_MENU.cheatsheets),
    getCollection(TOP_MENU.notes),
  ]);

  const allEntries = [...articles, ...cheatsheets, ...notes];

  const tagLangPairs = allEntries.flatMap(entry =>
    (entry.data.tags || []).map(tag => ({
      lang: entry.slug.split('/')[0],
      tag: tag.toLowerCase(),
    })),
  );

  const uniquePairs = Array.from(
    new Map(tagLangPairs.map(pair => [`${pair.lang}:${pair.tag}`, pair])).values(),
  );

  return uniquePairs.map(({ lang, tag }) => ({
    params: { lang, tag },
  }));
}

const { lang, tag } = Astro.params;
const [articles, cheatsheets, notes] = await Promise.all([
  getCollection(TOP_MENU.articles),
  getCollection(TOP_MENU.cheatsheets),
  getCollection(TOP_MENU.notes),
]);

const allEntries = [...articles, ...cheatsheets, ...notes].filter(entry => entry.slug.startsWith(lang));

const filtered = allEntries.filter(entry =>
  (entry.data.tags || []).map(t => t.toLowerCase()).includes(tag.toLowerCase()),
);
---

<BaseLayout>
  <h1 class="text-2xl font-bold mb-6">Tagged: {tag}</h1>
  <section class="flex flex-col gap-6">
    {filtered
      .sort((a, b) => new Date(b.data.date).getTime() - new Date(a.data.date).getTime())
      .map(({ data, collection, slug }) => (
        <ArticleCard
          key={slug}
          title={data.title}
          description={data.summary}
          pubDate={data.date}
          collection={collection}
          slug={slug}
        />
      ))}
  </section>
</BaseLayout>

